import { writeFileSync } from 'fs';
import { execSync } from 'child_process';

const REGION = 'us-east-1';

async function getStackOutputs() {
  const outputs = JSON.parse(
    execSync(
      `aws cloudformation describe-stacks --stack-name ivs-demo --region ${REGION} --query "Stacks[0].Outputs"`,
      { encoding: 'utf-8' }
    )
  );

  const channelArn = outputs.find((o: any) => o.OutputKey === 'ChannelArn')?.OutputValue;
  
  // Get stream key details
  const streamKeyResponse = JSON.parse(
    execSync(
      `aws ivs list-stream-keys --channel-arn ${channelArn} --region ${REGION}`,
      { encoding: 'utf-8' }
    )
  );
  
  const streamKeyArn = streamKeyResponse.streamKeys[0]?.arn;
  const streamKeyDetails = streamKeyArn ? JSON.parse(
    execSync(
      `aws ivs get-stream-key --arn ${streamKeyArn} --region ${REGION}`,
      { encoding: 'utf-8' }
    )
  ) : null;

  const config = {
    channelArn: outputs.find((o: any) => o.OutputKey === 'ChannelArn')?.OutputValue,
    chatRoomArn: outputs.find((o: any) => o.OutputKey === 'ChatRoomArn')?.OutputValue,
    playbackUrl: outputs.find((o: any) => o.OutputKey === 'PlaybackUrl')?.OutputValue,
    ingestEndpoint: outputs.find((o: any) => o.OutputKey === 'IngestEndpoint')?.OutputValue,
    streamKey: streamKeyDetails?.streamKey?.value,
    webSocketEndpoint: outputs.find((o: any) => o.OutputKey === 'WebSocketEndpoint')?.OutputValue,
  };

  return config;
}

async function main() {
  try {
    const config = await getStackOutputs();
    
    // Create the config file
    const configContent = `// Generated by fetch-ivs-config.ts
export const ivsConfig = ${JSON.stringify(config, null, 2)} as const;
`;

    writeFileSync('src/config/ivs.ts', configContent);
    console.log('IVS config written to src/config/ivs.ts');
  } catch (error) {
    console.error('Error fetching IVS config:', error);
    process.exit(1);
  }
}

main(); 